from itertools import count

# Блок 2

# Easy
"""1. Реализовать счетчик, который будет увеличиваться каждый раз, когда у нас осуществляется запуск функции
    суммирования."""

# count = 0
# def func_summ(a, b):
#     global count
#     count += 1
#     return f" Счетчик {count}, Сумма {a + b}"
#
# print(func_summ(2, 3))
# print(func_summ(2, 6))
# print(func_summ(2, 2))


# Medium
""" 1. Написать ещё несколько произвольных функций (3-4 штуки) и решить задачу со счетчиком аналогично той, которая была
решена для запуска функции суммирования.
2. Написать функцию, внутри которой у нас будет объявляться наша функция суммирования и возвращаться в качестве 
результата работы из объемлющей функции.
3. Попробуйте вызвать написанную функцию и сохраните результат её работы в переменную. Напечатайте результат на экран.
Что наблюдаете?
4. Осуществите вызов функции суммирования из полученной переменной. """

# 1.1
# count = 0
# def counter_1_1(a, b):
#     global count
#     count += 1
#     return f" Счетчик {count}, Сумма {a - b}"


# 1.2
# n = 0
# def counter_1_2(a, b):
#     global n
#     for n in count(start=n, step=1):
#         n += 1
#         return f" Счетчик {n}, Сумма {a + b}"

# 1.3
# n = 0
# def counter_1_3(a, b):
#     global n
#     while n >= 0:
#         n += 1
#         return f" Счетчик {n}, Сумма {a + b}"

# 1.4
# count = 0
# def func_summ(a, b):
#     global count
#     count += 1
#     return f" Счетчик {count}, Сумма {a / b}"


# 2.1
# def counter_2():
#     def func_summ(a, b):
#         return a + b
#     return func_summ


# 3.1
# count_res = counter_2() присваиваем объект функции переменной count_res, т.е. функцию присваиваем переменной
# print(count_res)        # <function counter_2.<locals>.func_summ at 0x0000022D811E2290>

# 4.1
# print(count_res(2, 6))
# print(count_res(3, 2))
# print(count_res(2, 8))

# Hard
""" 4. Перенесите глобальный счетчик на уровень объемлющей функции. Будет ли работать наш код? Если да, то как поменялся 
смысл написанного кода? Если нет, то что надо изменить, чтобы всё заработало? """

# 4.1
# def counter_2():
#     n = 0
#     print(n)
#
#     def func_summ(a, b):
#         nonlocal n
#         n += 1
#         return f" Счетчик {n}, Сумма {a + b}"
#
#     return func_summ
#
# result_count = counter_2()
#
# print(result_count(2, 5))
# Для того чтобы код заработал необходимо обратиться к переменной n которая находится на уровень выше к функции предку
# (если так можно сказать :) ) используя оператор nonlocal.